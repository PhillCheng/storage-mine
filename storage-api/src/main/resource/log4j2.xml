<?xml version="1.0" encoding="UTF-8"?>
<!-- 
    status:这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval:Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 
	注：本配置文件的目标是将不同级别的日志输出到不同文件，最大2MB一个文件，文件数据达到最大值时，旧数据会被压缩并放进指定文件夹
-->
<Configuration status="error" monitorInterval="18000">

	<Properties>
		<!-- 配置日志文件输出目录，此配置将日志输出到tomcat根目录下的指定文件夹 -->
		<Property name="LOG_HOME">${sys:catalina.home}/logs/fst</Property>
		<!-- 输出格式 -->
		<!-- 解释输出格式
			%p 显示该条日志的优先级
			%d 显示日志记录时间{日期格式}
			%t 输出产生该日志事件的线程名
			%c 列出logger名字空间的全称，如果加上{层数}表示列出从最内层算起的指定层数的名字空间
			%m 显示输出消息
			%n 当前平台下的换行符	
			%M 显示调用logger的方法名
			%F 显示调用logger的源文件名
			%C 列出调用logger的类的全名（包含包路径）
		 -->
		<Property name="PATTERN_LAYOUT">[%-5p] %d{yyyy-MM-dd HH:mm:ss.SSS}(%t:%c{1}.%M):%m%n</Property>
	</Properties>

	<Appenders>
		<!-- 控制台输出日志 -->
		<!--这个输出控制台的配置，这里输出除了warn和error级别的信息到System.out -->
		<Console name="console_out_appender" target="SYSTEM_OUT">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="warn" onMatch="DENY" onMismatch="ACCEPT" />
			<!-- 输出日志的格式 -->
			<PatternLayout pattern="%5p [%t] %d{yyyy-MM-dd HH:mm:ss} (%F:%L) %m%n" />
		</Console>
		<!--这个输出控制台的配置，这里输出warn和error级别的信息到System.err，在eclipse控制台上看到的是红色文字 -->
		<Console name="console_err_appender" target="SYSTEM_ERR">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY" />
			<!-- 输出日志的格式 -->
			<PatternLayout pattern="${PATTERN_LAYOUT}" />
		</Console>
		
		<!-- 容器与第三方插件文件输出日志 -->
		<!-- 设置日志格式并配置日志压缩格式，压缩文件独立放在一个文件夹内， 日期格式不能为冒号，否则无法生成，因为文件名不允许有冒号，此appender只输出debug级别的数据到debug.log -->
		<RollingFile name="frame_appender" fileName="${LOG_HOME}/storage-app_frame_debug.log"
		    filePattern="${LOG_HOME}/storage-app/frame_debug - %d{yyyy-MM-dd}.log.gz">
			<PatternLayout pattern="${PATTERN_LAYOUT}" />
			<!-- 复合触发策略 -->
			<!-- 两个配置任选其一 -->
			<Policies>
				<!-- 一旦文件达到指定的大小，会被触发。后缀可以为KB、MB、GB，即每个日志文件最大2MB -->
				<SizeBasedTriggeringPolicy size="2MB" />
				<!-- 如果启用此配置，则日志会按文件名生成新压缩文件， 即如果filePattern配置的日期格式为 %d{yyyy-MM-dd HH} 
					，则每小时生成一个压缩文件， 如果filePattern配置的日期格式为 %d{yyyy-MM-dd} ，则天生成一个压缩文件 -->
				<!-- <TimeBasedTriggeringPolicy interval="1" modulate="true" /> -->
			</Policies>
			<!--计数器的最大值。一旦达到这个值，旧的档案将在随后的翻转中被删除 -->
			<DefaultRolloverStrategy max="20" />
		</RollingFile>
		
		
		<!-- 业务相关文件输出日志 -->
		<RollingFile name="business_appender" fileName="${LOG_HOME}/storage-app_business_debug.log"
		    filePattern="${LOG_HOME}/storage-app/bussiness_debug - %d{yyyy-MM-dd}.log.gz">
			<PatternLayout pattern="${PATTERN_LAYOUT}" />
			<!-- 复合触发策略 -->
			<!-- 两个配置任选其一 -->
			<Policies>
				<!-- 一旦文件达到指定的大小，会被触发。后缀可以为KB、MB、GB，即每个日志文件最大2MB -->
				<SizeBasedTriggeringPolicy size="2MB" />
				<!-- 如果启用此配置，则日志会按文件名生成新压缩文件， 即如果filePattern配置的日期格式为 %d{yyyy-MM-dd HH} 
					，则每小时生成一个压缩文件， 如果filePattern配置的日期格式为 %d{yyyy-MM-dd} ，则天生成一个压缩文件 -->
				<!-- <TimeBasedTriggeringPolicy interval="1" modulate="true" /> -->
			</Policies>
			<!--计数器的最大值。一旦达到这个值，旧的档案将在随后的翻转中被删除 -->
			<DefaultRolloverStrategy max="200" />
		</RollingFile>
	</Appenders>

	<Loggers>
		<!-- 第三方日志系统 -->
		<logger name="org.springframework.core" level="INFO" />
		<logger name="org.springframework.beans" level="INFO" />
		<logger name="org.springframework.context" level="INFO" />
		<logger name="org.springframework.web" level="INFO" />
		<logger name="org.apache.http" level="WARN" />
		
		<!-- 业务模块 Logger -->
		<!--
            name：类名或包名，标志该 logger 与哪个包或哪个类绑定
            level：该 logger 的日志级别
            additivity：是否将日志信息传递给上一级
        -->
        <!-- 调整到debug级别方便开发做调试，生产环境需要调整到info级别 -->
		<logger level="DEBUG" name="com.cf.storage" additivity="false">
			<appender-ref ref="console_out_appender" />
			<appender-ref ref="console_err_appender" />
			<appenderRef ref="business_appender" />
		</logger>
		
		<!-- 配置日志的根节点 -->
		<root level="DEBUG">
			<appender-ref ref="console_out_appender" />
		    <appender-ref ref="console_err_appender" />
			<appender-ref ref="frame_appender" />
		</root>
	</Loggers>

</Configuration>